"use strict";(self.webpackChunkcrossplatformkorea_com=self.webpackChunkcrossplatformkorea_com||[]).push([[262],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(n),u=i,k=c["".concat(p,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(k,r(r({ref:t},m),{},{components:n})):a.createElement(k,r({ref:t},m))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7859:function(e,t,n){n.d(t,{Z:function(){return i}});var a=n(7294);function i(e){var t=e.className,n=void 0===t?"adfit":t,i=e.style,o=e.unit,r=e.height,l=e.width;return(0,a.useEffect)((function(){var e=setTimeout((function(){var e=document.createElement("ins"),t=document.createElement("script");e.className="kakao_ad_area",e.style="display:none; width:100%;",t.async="true",t.type="text/javascript",t.src="//t1.daumcdn.net/kas/static/ba.min.js",e.setAttribute("data-ad-width",l.toString()),e.setAttribute("data-ad-height",r.toString()),e.setAttribute("data-ad-unit",o.toString()),document.querySelector("."+n).appendChild(e),document.querySelector("."+n).appendChild(t)}),100);return function(){clearTimeout(e)}}),[]),a.createElement("div",{style:i},a.createElement("div",{className:n}))}},9388:function(e,t,n){n.d(t,{Z:function(){return o}});var a=n(7294),i=n(7859);function o(e){var t=e.unit,n=e.className,o=e.height,r=void 0===o?100:o,l=e.width,p=void 0===l?320:l,s=e.style;return a.createElement(i.Z,{unit:t,height:r,width:p,className:n,style:Object.assign({flex:1,marginTop:24,marginBottom:24},s)})}},2076:function(e,t,n){n.r(t),n.d(t,{assets:function(){return y},contentTitle:function(){return g},default:function(){return C},frontMatter:function(){return N},metadata:function(){return f},toc:function(){return b}});var a=n(7462),i=n(3366),o=(n(7294),n(3905)),r=n(9388),l=n.p+"assets/images/activity_indicator-1c6f8a953cf9ed1593a9fca1fde62872.png",p=(n.p,n.p,n.p+"assets/images/image-7d35cfc700ab6020216c68896bda8478.png"),s=n.p+"assets/images/scroll_view-f0e3f9bd78d9cd676d759840f5e6f406.png",m=n.p+"assets/images/section_list-7ef6894fc41dbeb3f7d27baac3f2b052.png",c=n.p+"assets/images/text_input-eb6c68ba1f86ed54c1004ba9ec369888.png",d=n.p+"assets/images/text-4d3a1eeefd13da57638c3363289b4e93.png",u=n.p+"assets/images/touchables-1b2ff3b5b7e4b8ded62166860f042269.png",k=n.p+"assets/images/view-424a6b2c79e6f14bb906d62908cb6540.png",h=["components"],N={id:"built-in",title:"Built-in Components",sidebar_label:"Built-in Components"},g=void 0,f={unversionedId:"react-native/component/built-in",id:"react-native/component/built-in",title:"Built-in Components",description:"In React, a component represents an independent and reusable piece of code that constructs the UI.",source:"@site/docs/react-native/component/built-in.mdx",sourceDirName:"react-native/component",slug:"/react-native/component/built-in",permalink:"/en/docs/current/react-native/component/built-in",draft:!1,editUrl:"https://github.com/crossplatformkorea/crossplatformkorea.com/edit/main/docs/react-native/component/built-in.mdx",tags:[],version:"current",frontMatter:{id:"built-in",title:"Built-in Components",sidebar_label:"Built-in Components"},sidebar:"react-native",previous:{title:"Component",permalink:"/en/docs/current/category/component"},next:{title:"Router",permalink:"/en/docs/current/category/router"}},y={},b=[{value:"React Native Components",id:"react-native-components",level:2},{value:"<strong>1. View</strong>",id:"1-view",level:2},{value:"<strong>Key Features</strong>",id:"key-features",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example",level:3},{value:"2. <strong>Text</strong>",id:"2-text",level:2},{value:"<strong>Key Features</strong>",id:"key-features-1",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-1",level:3},{value:"Code Explanation",id:"code-explanation",level:4},{value:"3. <strong>Image</strong>",id:"3-image",level:2},{value:"<strong>Key Features</strong>",id:"key-features-2",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-2",level:3},{value:"4. <strong>TextInput</strong>",id:"4-textinput",level:2},{value:"<strong>Key Features</strong>",id:"key-features-3",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-3",level:3},{value:"5. <strong>ScrollView</strong>",id:"5-scrollview",level:2},{value:"<strong>Key Features</strong>",id:"key-features-4",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-4",level:3},{value:"6. <strong>Button</strong>",id:"6-button",level:2},{value:"<strong>Key Features</strong>",id:"key-features-5",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-5",level:3},{value:"<strong>Key Features</strong>",id:"key-features-6",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-6",level:3},{value:"8. <strong>SectionList</strong>",id:"8-sectionlist",level:2},{value:"<strong>Key Features</strong>",id:"key-features-7",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-7",level:3},{value:"9. <strong>ActivityIndicator</strong>",id:"9-activityindicator",level:2},{value:"<strong>Key Features</strong>",id:"key-features-8",level:3},{value:"<strong>Main props</strong>",id:"main-props",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-8",level:3},{value:"10. <strong>Touchable**</strong>",id:"10-touchable",level:2},{value:"<strong>TouchableHighlight</strong>",id:"touchablehighlight",level:3},{value:"<strong>TouchableOpacity</strong>",id:"touchableopacity",level:3},{value:"<strong>TouchableWithoutFeedback</strong>",id:"touchablewithoutfeedback",level:3},{value:"<strong>Usage Example</strong>",id:"usage-example-9",level:4}],x={toc:b},v="wrapper";function C(e){var t=e.components,n=(0,i.Z)(e,h);return(0,o.kt)(v,(0,a.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In React, a component represents an independent and reusable piece of code that constructs the UI."),(0,o.kt)(r.Z,{unit:"DAN-YpcHf9p49U5ykXi8",className:"adfit-top-mobile",mdxType:"AdFitMobileBanner"}),(0,o.kt)("h2",{id:"react-native-components"},"React Native Components"),(0,o.kt)("p",null,"React Native is a framework for developing mobile applications, building on the concepts of React while offering components specialized for mobile. The basic React Native components are as follows."),(0,o.kt)(r.Z,{unit:"DAN-iG6z7ELkAvyoFlIS",className:"adfit-middle-mobile1",mdxType:"AdFitMobileBanner"}),(0,o.kt)("h2",{id:"1-view"},(0,o.kt)("strong",{parentName:"h2"},"1. View")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"View")," is one of the most basic components in React Native, serving as a building block for UI. It plays a role similar to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," tag in web, ",(0,o.kt)("inlineCode",{parentName:"p"},"UIView")," in iOS, and ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewGroup")," in Android."),(0,o.kt)("h3",{id:"key-features"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Container"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," can act as a container, grouping other components together, playing a vital role in constructing layouts.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styling"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component can be styled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop. This includes applying styles like background color, padding, margin, borders, and more.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Touch Events"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," can respond to user touch events. For instance, it can detect and respond to user taps, swipes, etc.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Accessibility"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," supports accessibility features, helping provide information to assistive technologies like screen readers.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Layout"),": React Native employs the Flexbox layout. The ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component fully supports all Flexbox properties, making it versatile for constructing complex UI layouts."))),(0,o.kt)("h3",{id:"usage-example"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {View, Text} from 'react-native';\n\nconst ViewBoxesWithColorAndText = () => {\n  return (\n    <View\n      style={{\n        flexDirection: 'row',\n        height: 100,\n        padding: 20,\n      }}>\n      <View style={{backgroundColor: 'blue', flex: 0.3}} />\n      <View style={{backgroundColor: 'red', flex: 0.5}} />\n      <Text>Hello World!</Text>\n    </View>\n  );\n};\n\nexport default ViewBoxesWithColorAndText;\n")),(0,o.kt)("p",null,"The main features of the given code are as follows."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"React")," is imported to access the React library."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"View")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," are UI components imported from the React Native library. The ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," generally serves as a container, while ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," displays text."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"ViewBoxesWithColorAndText Component"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This component consists of a ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," containing three child elements."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Outer View Style"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"flexDirection: 'row'"),": Aligns child elements horizontally."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"height: 100"),": The height of this View is 100 pixels."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"padding: 20"),": Adds padding of 20 pixels on all sides of this View."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Child Elements"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The first ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),": Has a blue background and occupies 30% of the parent ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),"'s width (",(0,o.kt)("inlineCode",{parentName:"li"},"flex: 0.3"),")."),(0,o.kt)("li",{parentName:"ul"},"The second ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),": Has a red background and occupies 50% of the parent ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),"'s width (",(0,o.kt)("inlineCode",{parentName:"li"},"flex: 0.5"),")."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Text"),': Displays the text "Hello World!".'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export"),":"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"export default ViewBoxesWithColorAndText;")," allows this component to be imported and used in other files.")))),(0,o.kt)("p",null,'Based on the description above, when this component is displayed on the screen, you will see two boxes of different colors and the text "Hello World!" aligned horizontally.'),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-view"},(0,o.kt)("img",{src:k,width:"100%",alt:"view example"})),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-view"},"picture")," to run the example code."),(0,o.kt)("h2",{id:"2-text"},"2. ",(0,o.kt)("strong",{parentName:"h2"},"Text")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Text")," is a key component in React Native, used to display text on the screen. It functions similarly to the ",(0,o.kt)("inlineCode",{parentName:"p"},"<span>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"<p>")," tags in web."),(0,o.kt)("h3",{id:"key-features-1"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Displaying Text"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component is used to convey textual information to the user.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styling"),": Just like the ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component can be styled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop. It supports a range of text-styling properties like font size, font color, weight (boldness), text alignment, and more.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Nesting"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component can be nested, meaning one ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component can contain another. This allows for complex styling, where certain segments of text can have distinct styles.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Touch Events"),": Touch events can also be applied to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component, defining behaviors like what happens when the text is tapped.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Text-Specific Properties"),": You can set text-specific properties like line height, letter spacing, ellipsis (text truncation), and more."))),(0,o.kt)("h3",{id:"usage-example-1"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useState} from 'react';\nimport {Text, StyleSheet} from 'react-native';\n\nconst TextInANest = () => {\n  const [titleText, setTitleText] = useState(\"Bird's Nest\");\n  const bodyText = 'This is not really a bird nest.';\n\n  const onPressTitle = () => {\n    setTitleText(\"Bird's Nest [pressed]\");\n  };\n\n  return (\n    <Text style={styles.baseText}>\n      <Text style={styles.titleText} onPress={onPressTitle}>\n        {titleText}\n        {'\\n'}\n        {'\\n'}\n      </Text>\n      <Text numberOfLines={5}>{bodyText}</Text>\n    </Text>\n  );\n};\n\nconst styles = StyleSheet.create({\n  baseText: {\n    fontFamily: 'Cochin',\n  },\n  titleText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n});\n\nexport default TextInANest;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-text"},(0,o.kt)("img",{src:d,width:"100%",alt:"view text"})),(0,o.kt)("p",null,"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-text"},"image")," to run the example code."),(0,o.kt)("h4",{id:"code-explanation"},"Code Explanation"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React, {useState} from 'react';\nimport {Text, StyleSheet} from 'react-native';\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Import React and React's ",(0,o.kt)("inlineCode",{parentName:"li"},"useState")," hook."),(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," component and ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet")," object from React Native."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"TextInANest Component"),"\nThis component consists of 2 text elements."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Initialize ",(0,o.kt)("inlineCode",{parentName:"p"},"titleText")," state variable and its setter function ",(0,o.kt)("inlineCode",{parentName:"p"},"setTitleText")," using ",(0,o.kt)("inlineCode",{parentName:"p"},"useState"),". The initial value is ",(0,o.kt)("inlineCode",{parentName:"p"},'"Bird\'s Nest"'),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"bodyText")," is a constant variable with the value set to ",(0,o.kt)("inlineCode",{parentName:"p"},'"This is not really a bird nest."'),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"onPressTitle")," function updates the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"titleText")," to ",(0,o.kt)("inlineCode",{parentName:"p"},'"Bird\'s Nest [pressed]"'),". It's triggered when the title text is tapped.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," statement, two ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," components are nested inside a parent ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component. The nested structure allows for inheriting styles and other attributes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The first nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component displays the title and when pressed, triggers the ",(0,o.kt)("inlineCode",{parentName:"p"},"onPressTitle")," function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The second nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component displays the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"bodyText"),". It is configured to show a maximum of 5 lines using the ",(0,o.kt)("inlineCode",{parentName:"p"},"numberOfLines")," prop.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({\n  baseText: {\n    fontFamily: 'Cochin',\n  },\n  titleText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n});\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Define styles using the ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet.create")," method."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"baseText")," style sets the font to 'Cochin'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"titleText")," style sets the font size to 20 and displays the text in bold."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default TextInANest;\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Set ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInANest")," component as the default export so it can be imported and used in other files.")))),(0,o.kt)(r.Z,{unit:"DAN-iG6z7ELkAvyoFlIS",className:"adfit-middle-mobile2",mdxType:"AdFitMobileBanner"}),(0,o.kt)("h2",{id:"3-image"},"3. ",(0,o.kt)("strong",{parentName:"h2"},"Image")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," is a fundamental component in React Native for displaying images. Using this component, you can display both static images included in the app and images fetched from an external URL."),(0,o.kt)("h3",{id:"key-features-2"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Source Type"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," component supports various types of image sources. This can be an image imported locally via ",(0,o.kt)("inlineCode",{parentName:"p"},"require")," or fetched through a web URL.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styling"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," can also be styled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop. Through this, you can set styles such as image size, rounded corners, and borders.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Resizing"),": You can specify the resizing mode of the image using the ",(0,o.kt)("inlineCode",{parentName:"p"},"resizeMode")," prop. For instance, values include 'cover', 'contain', 'stretch', 'repeat', and 'center'.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Event Handling"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"Image")," component offers callbacks for various events, such as image load completion and load failure.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Fade-in Effect"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"fadeDuration")," prop allows you to set the duration of the fade-in effect when the image is displayed on the screen (Android exclusive)."))),(0,o.kt)("h3",{id:"usage-example-2"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {View, Image, StyleSheet} from 'react-native';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 50\n  },\n  tinyLogo: {\n    width: 50,\n    height: 50,\n  },\n});\n\nconst DisplayAnImage = () => {\n  return (\n    <View style={styles.container}>\n      <Image\n        style={styles.tinyLogo}\n        source={require('@expo/snack-static/react-native-logo.png')}\n      />\n      <Image\n        style={styles.tinyLogo}\n        source={{\n          uri: 'https://reactnative.dev/img/tiny_logo.png',\n        }}\n      />\n    </View>\n  );\n};\n\nexport default DisplayAnImage;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-image"},(0,o.kt)("img",{src:p,width:"100%",alt:"view image"})),"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-image"},"picture")," to run the example code.",(0,o.kt)("p",null,"The code defines a simple component in React Native to display images on the screen."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {View, Image, StyleSheet} from 'react-native';\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Imports the React library."),(0,o.kt)("li",{parentName:"ul"},"Imports ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Image"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet")," from React Native."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({\n  container: {\n    paddingTop: 50\n  },\n  tinyLogo: {\n    width: 50,\n    height: 50,\n  },\n});\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Styles are defined using the ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet.create")," method."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container")," has a padding top of 50."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"tinyLogo")," defines the image size to be 50x50."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"DisplayAnImage Component")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Contains two ",(0,o.kt)("inlineCode",{parentName:"li"},"Image")," components inside a ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," component."),(0,o.kt)("li",{parentName:"ul"},"The first ",(0,o.kt)("inlineCode",{parentName:"li"},"Image")," component displays an image from the local path, in this case, ",(0,o.kt)("inlineCode",{parentName:"li"},"@expo/snack-static/react-native-logo.png"),"."),(0,o.kt)("li",{parentName:"ul"},"The second ",(0,o.kt)("inlineCode",{parentName:"li"},"Image")," component displays an image fetched from a web URL, specifically ",(0,o.kt)("inlineCode",{parentName:"li"},"https://reactnative.dev/img/tiny_logo.png"),"."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default DisplayAnImage;\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"DisplayAnImage")," component is set as the default export, allowing it to be imported and used in other files.")))),(0,o.kt)("h2",{id:"4-textinput"},"4. ",(0,o.kt)("strong",{parentName:"h2"},"TextInput")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," is a core component in React Native for accepting user text input. It operates similarly to the web's ",(0,o.kt)("inlineCode",{parentName:"p"},'<input type="text">')," element, allowing users to enter or modify text."),(0,o.kt)("h3",{id:"key-features-3"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Text Input"),": Allows users to enter text through the keyboard.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styling"),": ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," can also be styled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop. This enables specifying input field dimensions, borders, font style, and so on.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Placeholder"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholder")," prop can be used to offer guidance or examples of input to users.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Value Control"),": Access or modify the current input value using the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," prop. Additionally, the ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," prop allows the execution of a callback function when the text changes.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Keyboard Type"),": Using the ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboardType")," prop, you can request to display a specific type of keyboard layout (e.g., 'numeric' for numbers only).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Multiple Lines"),": Text input can accommodate multiple lines using the ",(0,o.kt)("inlineCode",{parentName:"p"},"multiline")," prop.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Event Handling"),": Provides callback functions for various events. For instance, there's ",(0,o.kt)("inlineCode",{parentName:"p"},"onFocus"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onBlur"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onSubmitEditing"),", and others."))),(0,o.kt)("h3",{id:"usage-example-3"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {SafeAreaView, StyleSheet, TextInput} from 'react-native';\n\nconst TextInputExample = () => {\n  const [text, onChangeText] = React.useState('Useless Text');\n  const [number, onChangeNumber] = React.useState('');\n\n  return (\n    <SafeAreaView>\n      <TextInput\n        style={styles.input}\n        onChangeText={onChangeText}\n        value={text}\n      />\n      <TextInput\n        style={styles.input}\n        onChangeText={onChangeNumber}\n        value={number}\n        placeholder=\"useless placeholder\"\n        keyboardType=\"numeric\"\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n});\n\nexport default TextInputExample;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-textinput"},(0,o.kt)("img",{src:c,width:"100%",alt:"text-input"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-textinput"},"image")," to run the example code.")),(0,o.kt)("p",null,"This code defines a component using React Native that displays two text input boxes on the screen."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {SafeAreaView, StyleSheet, TextInput} from 'react-native';\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This imports React and React Native's ",(0,o.kt)("inlineCode",{parentName:"li"},"SafeAreaView"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInput")," components."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"TextInputExample Component")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Using ",(0,o.kt)("inlineCode",{parentName:"li"},"useState"),", the text state variable ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," and the number state variable ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," are initialized. ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," starts with the value 'Useless Text'."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"onChangeText")," updates the ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," state, and ",(0,o.kt)("inlineCode",{parentName:"li"},"onChangeNumber")," updates the ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," state."),(0,o.kt)("li",{parentName:"ul"},"Inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"SafeAreaView"),", two ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInput")," components are returned.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The first ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInput")," displays the ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," value and updates the state using ",(0,o.kt)("inlineCode",{parentName:"li"},"onChangeText")," when its value changes."),(0,o.kt)("li",{parentName:"ul"},"The second ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInput")," displays the ",(0,o.kt)("inlineCode",{parentName:"li"},"number")," value, updates its state using ",(0,o.kt)("inlineCode",{parentName:"li"},"onChangeNumber")," when the value changes, sets the ",(0,o.kt)("inlineCode",{parentName:"li"},"keyboardType"),' attribute to "numeric" to display a numeric keyboard, and uses the ',(0,o.kt)("inlineCode",{parentName:"li"},"placeholder"),' attribute to show the text "useless placeholder" when the input box is empty.'))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10,\n  },\n});\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Input box styles are defined using the ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet.create")," method. The input box has a height of 40, margin of 12, border width of 1, and padding of 10."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default TextInputExample;\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInputExample")," component is set as a default export, making it importable for use in other files.")))),(0,o.kt)("h2",{id:"5-scrollview"},"5. ",(0,o.kt)("strong",{parentName:"h2"},"ScrollView")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," is a basic component in React Native that, when the content exceeds the screen size, allows for scrolling to view the content. It's typically used to view components or lists that are larger than the screen size."),(0,o.kt)("h3",{id:"key-features-4"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Scrollable Container"),": Wraps content that exceeds the visible range of the screen, allowing users to scroll to see the entire content.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Direction"),": By default, it scrolls vertically. However, by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"horizontal")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", you can make it scroll horizontally.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Integrated Styling"),": The ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," can also be styled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Event Handling"),": It provides callback functions for various scroll events. For instance, there are ",(0,o.kt)("inlineCode",{parentName:"p"},"onScroll"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onMomentumScrollStart"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"onMomentumScrollEnd"),", etc.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Refresh Control"),": Through the ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshControl")," prop, you can implement the pull-to-refresh feature.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Performance"),": When displaying large lists or grids, it's better to use optimized components like ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView"),"."))),(0,o.kt)("h3",{id:"usage-example-4"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n} from 'react-native';\n\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        <Text style={styles.text}>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </Text>\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20,\n  },\n  text: {\n    fontSize: 42,\n  },\n});\n\nexport default App;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-scrollview"},(0,o.kt)("img",{src:s,width:"100%",alt:"scroll-view"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-scrollview"},"picture")," to execute the sample code.")),(0,o.kt)("p",null,"This code describes a simple application using React Native that displays a scrollable text area."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n} from 'react-native';\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It imports the necessary modules and components, namely ",(0,o.kt)("inlineCode",{parentName:"li"},"React"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Text"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"SafeAreaView"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"ScrollView"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"StatusBar")," from React Native."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"App Component")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"SafeAreaView")," serves as the main container of the application. This container has padding at the top equal to the device's status bar height."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ScrollView")," provides a scrollable area. In this example, a ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," component is placed inside the ",(0,o.kt)("inlineCode",{parentName:"li"},"ScrollView")," to create a scrollable text area."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"Text"),' component displays sample text like "Lorem ipsum...".'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20,\n  },\n  text: {\n    fontSize: 42,\n  },\n});\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Styles are defined using the ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet.create")," method."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"container")," style is set to take up the entire screen (",(0,o.kt)("inlineCode",{parentName:"li"},"flex: 1"),") and has padding at the top equal to the height of the status bar."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"scrollView")," style sets the background color to 'pink' and has a horizontal margin of 20 on both sides."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"text")," style sets the font size of the text to 42."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default App;\n")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"App")," component is set to default export so that it can be imported and used in other files.")))),(0,o.kt)("h2",{id:"6-button"},"6. ",(0,o.kt)("strong",{parentName:"h2"},"Button")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Button")," is one of the user interface components provided by default in React Native, representing a button element that users can touch."),(0,o.kt)("h3",{id:"key-features-5"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Simple Interface"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"Button")," offers a straightforward API, primarily used to set a title and event handler."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Platform-specific Styling"),": By default, the ",(0,o.kt)("inlineCode",{parentName:"li"},"Button")," adopts the native styling of the current platform (e.g., iOS, Android)."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Limited Customization"),": The customization options for the ",(0,o.kt)("inlineCode",{parentName:"li"},"Button")," component are limited. If you're looking for more advanced styling or features, you might want to consider other components or third-party libraries.")),(0,o.kt)("h3",{id:"usage-example-5"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  StyleSheet,\n  Button,\n  View,\n  SafeAreaView,\n  Text,\n  Alert,\n} from 'react-native';\n\nconst Separator = () => <View style={styles.separator} />;\n\nconst App = () => (\n  <SafeAreaView style={styles.container}>\n    <View>\n      <Text style={styles.title}>\n        The title and onPress handler are required. It is recommended to set\n        accessibilityLabel to help make your app usable by everyone.\n      </Text>\n      <Button\n        title=\"Press me\"\n        onPress={() => Alert.alert('Simple Button pressed')}\n      />\n    </View>\n    <Separator />\n    <View>\n      <Text style={styles.title}>\n        Adjust the color in a way that looks standard on each platform. On iOS,\n        the color prop controls the color of the text. On Android, the color\n        adjusts the background color of the button.\n      </Text>\n      <Button\n        title=\"Press me\"\n        color=\"#f194ff\"\n        onPress={() => Alert.alert('Button with adjusted color pressed')}\n      />\n    </View>\n    <Separator />\n    <View>\n      <Text style={styles.title}>\n        All interaction for the component are disabled.\n      </Text>\n      <Button\n        title=\"Press me\"\n        disabled\n        onPress={() => Alert.alert('Cannot press this one')}\n      />\n    </View>\n    <Separator />\n    <View>\n      <Text style={styles.title}>\n        This layout strategy lets the title define the width of the button.\n      </Text>\n      <View style={styles.fixToText}>\n        <Button\n          title=\"Left button\"\n          onPress={() => Alert.alert('Left button pressed')}\n        />\n        <Button\n          title=\"Right button\"\n          onPress={() => Alert.alert('Right button pressed')}\n        />\n      </View>\n    </View>\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    marginHorizontal: 16,\n  },\n  title: {\n    textAlign: 'center',\n    marginVertical: 8,\n  },\n  fixToText: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  separator: {\n    marginVertical: 8,\n    borderBottomColor: '#737373',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default App;\n")),(0,o.kt)("p",null,"By clicking on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-button"},"image"),", you can run and test the example code."),(0,o.kt)("p",null,"This code illustrates an application using React Native that displays buttons with various attributes on the screen."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {\n  StyleSheet,\n  Button,\n  View,\n  SafeAreaView,\n  Text,\n  Alert,\n} from 'react-native';\n")),(0,o.kt)("p",{parentName:"li"},"Here, the necessary modules and components are imported from React Native.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Separator Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Separator = () => <View style={styles.separator} />;\n")),(0,o.kt)("p",{parentName:"li"},"This is a simple component to create vertical spacing and a separator line.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"App Component"),"\nThis component contains multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," containers. Inside each ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", there's explanatory ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"Button"),". "),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"first button")," comes with default settings."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"second button")," uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"color")," property to adjust its color. On iOS, this changes the color of the text, while on Android, it adjusts the button's background color."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"third button")," is deactivated due to the ",(0,o.kt)("inlineCode",{parentName:"li"},"disabled")," property, hence, nothing happens when it's clicked."),(0,o.kt)("li",{parentName:"ul"},"The last ",(0,o.kt)("inlineCode",{parentName:"li"},"two buttons")," are positioned side by side in the same row, which is achieved by setting the ",(0,o.kt)("inlineCode",{parentName:"li"},"flexDirection: 'row'")," property via the ",(0,o.kt)("inlineCode",{parentName:"li"},"styles.fixToText")," style."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({ ... });\n")),(0,o.kt)("p",{parentName:"li"},"This is where the styles of the application are defined. Each style controls the visual representation of the components."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"container")," style centers the main container of the app."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"title")," style is applied to the title text of each section."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fixToText")," is used to place two buttons side by side in the same row."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"separator")," style defines the separator line distinguishing each section."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default App;\n")),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component is set as the default export, allowing it to be imported and used in other files."))),(0,o.kt)("h1",{id:"7-flatlist"},"7. ",(0,o.kt)("strong",{parentName:"h1"},"FlatList")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," is a component in React Native designed for efficiently displaying large sets of data. This component uses 'windowing' technology to optimize performance by rendering only the views that are currently visible on the screen."),(0,o.kt)("h3",{id:"key-features-6"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Performance Optimization"),": Items that are not visible on the screen are not rendered, reducing rendering overhead."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Pooling Technique"),": Previously rendered item views can be reused."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Built-in Scrolling"),": Automatic scrolling functionality is integrated.")),(0,o.kt)("h3",{id:"usage-example-6"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  SafeAreaView,\n  View,\n  FlatList,\n  StyleSheet,\n  Text,\n  StatusBar,\n} from 'react-native';\n\nconst DATA = [\n  {\n    id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',\n    title: 'First Item',\n  },\n  {\n    id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',\n    title: 'Second Item',\n  },\n  {\n    id: '58694a0f-3da1-471f-bd96-145571e29d72',\n    title: 'Third Item',\n  },\n];\n\ntype ItemProps = {title: string};\n\nconst Item = ({title}: ItemProps) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={DATA}\n        renderItem={({item}) => <Item title={item.title} />}\n        keyExtractor={item => item.id}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    backgroundColor: '#f9c2ff',\n    padding: 20,\n    marginVertical: 8,\n    marginHorizontal: 16,\n  },\n  title: {\n    fontSize: 32,\n  },\n});\n\nexport default App;\n")),(0,o.kt)("p",null,"By clicking on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-flatlist"},"image"),", you can run and test the example code."),(0,o.kt)("p",null,"This code demonstrates an example of creating a simple list view using React Native. Let's break down the key sections:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {\n  SafeAreaView,\n  View,\n  FlatList,\n  StyleSheet,\n  Text,\n  StatusBar,\n} from 'react-native';\n")),(0,o.kt)("p",{parentName:"li"},"Here, the necessary components and modules from React Native are imported for constructing the app.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"DATA Constant")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const DATA = [ ... ];\n")),(0,o.kt)("p",{parentName:"li"},"This is an array of data to be displayed in the list view. Each item has a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"ItemProps Type")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"type ItemProps = {title: string};\n")),(0,o.kt)("p",{parentName:"li"},"Using TypeScript, the type for the ",(0,o.kt)("inlineCode",{parentName:"p"},"props")," of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Item")," component is defined. Here, it includes only a ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," property which is a string.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Item Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Item = ({title}: ItemProps) => ( ... );\n")),(0,o.kt)("p",{parentName:"li"},"This is a component for displaying individual list items. It contains a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component with a background color, padding, and text style.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"App Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const App = () => { ... };\n")),(0,o.kt)("p",{parentName:"li"},"This is the main component of the app. It uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component to display the items from the ",(0,o.kt)("inlineCode",{parentName:"p"},"DATA")," array. "),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," prop specifies the data to be displayed."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"renderItem")," prop defines how each item will be rendered."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"keyExtractor")," prop specifies a function to extract a unique key for each item. Here, the ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," of each item is used."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({ ... });\n")),(0,o.kt)("p",{parentName:"li"},"This section defines the styles for the application. Styles for the container, item, and title are defined here.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default App;\n")),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component is set as the default export, allowing it to be imported and used in other files."))),(0,o.kt)("h2",{id:"8-sectionlist"},"8. ",(0,o.kt)("strong",{parentName:"h2"},"SectionList")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," is a component that displays list data with section headers. Like ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList"),", it offers performance optimization features, but it allows data to be displayed in distinct sections."),(0,o.kt)("h3",{id:"key-features-7"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Section Display"),": Displays data divided into multiple sections."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Section Headers"),": Provides headers at the beginning of each section.")),(0,o.kt)("h3",{id:"usage-example-7"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  SectionList,\n  StatusBar,\n} from 'react-native';\n\nconst DATA = [\n  {\n    title: 'Main dishes',\n    data: ['Pizza', 'Burger', 'Risotto'],\n  },\n  {\n    title: 'Sides',\n    data: ['French Fries', 'Onion Rings', 'Fried Shrimps'],\n  },\n  {\n    title: 'Drinks',\n    data: ['Water', 'Coke', 'Beer'],\n  },\n  {\n    title: 'Desserts',\n    data: ['Cheese Cake', 'Ice Cream'],\n  },\n];\n\nconst App = () => (\n  <SafeAreaView style={styles.container}>\n    <SectionList\n      sections={DATA}\n      keyExtractor={(item, index) => item + index}\n      renderItem={({item}) => (\n        <View style={styles.item}>\n          <Text style={styles.title}>{item}</Text>\n        </View>\n      )}\n      renderSectionHeader={({section: {title}}) => (\n        <Text style={styles.header}>{title}</Text>\n      )}\n    />\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: StatusBar.currentHeight,\n    marginHorizontal: 16,\n  },\n  item: {\n    backgroundColor: '#f9c2ff',\n    padding: 20,\n    marginVertical: 8,\n  },\n  header: {\n    fontSize: 32,\n    backgroundColor: '#fff',\n  },\n  title: {\n    fontSize: 24,\n  },\n});\n\nexport default App;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-sectionlist"},(0,o.kt)("img",{src:m,width:"100%",alt:"sectionlist"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-sectionlist"},"photo")," to run the sample\ncode.")),(0,o.kt)("p",null,"This code is an example of using React Native to create a list that displays items grouped by sections. The main components are:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {\n  StyleSheet,\n  Text,\n  View,\n  SafeAreaView,\n  SectionList,\n  StatusBar,\n} from 'react-native';\n")),(0,o.kt)("p",{parentName:"li"},"Import the necessary React Native components and modules for the app's construction.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"DATA Constant")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const DATA = [ ... ];\n")),(0,o.kt)("p",{parentName:"li"},"This is the data for the items grouped by sections. Each section consists of a ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", where ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," contains the items for that section as an array.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"App Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const App = () => { ... };\n")),(0,o.kt)("p",{parentName:"li"},"This is the main component of the app. It uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," component to display items from the ",(0,o.kt)("inlineCode",{parentName:"p"},"DATA")," array divided by sections."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"sections")," prop specifies the data to display for each section."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"keyExtractor")," prop specifies a function to create a unique key for each item. Here, the key is generated by combining the item's value and its index."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"renderItem")," prop defines how each item will be rendered."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"renderSectionHeader")," prop defines how the header for each section will be rendered."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({ ... });\n")),(0,o.kt)("p",{parentName:"li"},"This part defines the application's styles. Here, the styles for the container, items, section headers, and item titles are defined.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default App;\n")),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component is set as the default export, allowing it to be imported and used in other files."))),(0,o.kt)(r.Z,{unit:"DAN-iG6z7ELkAvyoFlIS",className:"adfit-middle-mobile5",mdxType:"AdFitMobileBanner"}),(0,o.kt)("h2",{id:"9-activityindicator"},"9. ",(0,o.kt)("strong",{parentName:"h2"},"ActivityIndicator")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," is a loading indicator (or spinner) component provided by React Native. It's useful for letting users know that the app is still working while fetching data or during processing."),(0,o.kt)("h3",{id:"key-features-8"},(0,o.kt)("strong",{parentName:"h3"},"Key Features")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Platform-specific Style"),": By default, the ",(0,o.kt)("inlineCode",{parentName:"li"},"ActivityIndicator")," uses the native loading indicator style of the current platform (iOS or Android)."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Customizability"),": You can customize various properties of the indicator, such as its size and color.")),(0,o.kt)("h3",{id:"main-props"},(0,o.kt)("strong",{parentName:"h3"},"Main props")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"size"),": Sets the size of the indicator. It can take either a string value of 'small' or 'large' or a specific numeric value."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"color"),": Sets the color of the indicator. This value should be a valid color string (e.g., '#0000ff' or 'blue')."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"animating"),": Determines whether the indicator should spin. The default value is ",(0,o.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,o.kt)("h3",{id:"usage-example-8"},(0,o.kt)("strong",{parentName:"h3"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport {ActivityIndicator, StyleSheet, View} from 'react-native';\n\nconst App = () => (\n  <View style={[styles.container, styles.horizontal]}>\n    <ActivityIndicator />\n    <ActivityIndicator size=\"large\" />\n    <ActivityIndicator size=\"small\" color=\"#0000ff\" />\n    <ActivityIndicator size=\"large\" color=\"#00ff00\" />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  horizontal: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    padding: 10,\n  },\n});\n\nexport default App;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-activity-indicator"},(0,o.kt)("img",{src:l,width:"100%",alt:"activity-indicator"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Click on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-activity-indicator"},"image")," to run the example code.")),(0,o.kt)("p",null,"This code demonstrates a React Native application that displays multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," components on the screen. The ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," is a rotating circular indicator used in apps to notify users of ongoing loading or data processing."),(0,o.kt)("p",null,"Here's a breakdown of each section:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport {ActivityIndicator, StyleSheet, View} from 'react-native';\n")),(0,o.kt)("p",{parentName:"li"},"This section imports the required React Native components and modules for building the app.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"App Component")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const App = () => { ... };\n")),(0,o.kt)("p",{parentName:"li"},"This is the main component of the app. Here, four different ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," components are rendered."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The first and second ",(0,o.kt)("inlineCode",{parentName:"li"},"ActivityIndicator")," only differ in size. Sizes can be either the default or ",(0,o.kt)("inlineCode",{parentName:"li"},"large"),"."),(0,o.kt)("li",{parentName:"ul"},"The third and fourth ",(0,o.kt)("inlineCode",{parentName:"li"},"ActivityIndicator")," have both size and color specified."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const styles = StyleSheet.create({ ... });\n")),(0,o.kt)("p",{parentName:"li"},"This section defines the application's styles."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container"),": Centers the component on the screen."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"horizontal"),": Sets the component's orientation to horizontal and evenly spaces components. Padding is added to ensure components aren't too close to the screen edges."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Export")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"export default App;\n")),(0,o.kt)("p",{parentName:"li"},"This line sets ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component as the default export, making it importable in other files."))),(0,o.kt)("h2",{id:"10-touchable"},"10. ",(0,o.kt)("strong",{parentName:"h2"},"Touchable","*","*")),(0,o.kt)("p",null,'In React Native, various "Touchable" components are provided to handle user touch inputs. These components are used to create a responsive UI when users tap on screen elements. Here, we\'ll cover ',(0,o.kt)("inlineCode",{parentName:"p"},"TouchableHighlight"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableOpacity"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableWithoutFeedback"),"."),(0,o.kt)("h3",{id:"touchablehighlight"},(0,o.kt)("strong",{parentName:"h3"},"TouchableHighlight")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Functionality"),": A component that offers a brightness change effect when touched by the user."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Main Features"),": Upon touch, a specified background color is revealed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Key props"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"underlayColor"),": The background color that appears on touch.")))),(0,o.kt)("h3",{id:"touchableopacity"},(0,o.kt)("strong",{parentName:"h3"},"TouchableOpacity")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Functionality"),": A component that provides a transparency change effect when touched."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Main Features"),": The transparency of the component decreases upon touch."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Key props"),":",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"activeOpacity"),": The transparency level applied on touch. The default value is 0.2.")))),(0,o.kt)("h3",{id:"touchablewithoutfeedback"},(0,o.kt)("strong",{parentName:"h3"},"TouchableWithoutFeedback")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Functionality"),": A component to process touch events without any visual effect."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Main Features"),": Typically used alongside custom effects due to its absence of visual feedback.")),(0,o.kt)("p",null,'Each "Touchable" component can be selectively used depending on various situations and requirements. For instance, you might choose ',(0,o.kt)("inlineCode",{parentName:"p"},"TouchableOpacity")," for rapid visual feedback on touch or ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableWithoutFeedback")," when you need additional actions without any touch effect."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Besides these, React Native offers many other built-in components and APIs. Additionally, numerous libraries provided by the community allow for the utilization of extra components or functionalities.")),(0,o.kt)("h4",{id:"usage-example-9"},(0,o.kt)("strong",{parentName:"h4"},"Usage Example")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React, {useState} from 'react';\nimport {StyleSheet, Text, TouchableHighlight, TouchableOpacity, TouchableWithoutFeedback, View} from 'react-native';\n\nconst TouchablesExample = () => {\n  const [count, setCount] = useState(0);\n  const onPress = () => setCount(count + 1);\n\n  return (\n    <View style={styles.container}>\n      <TouchableHighlight onPress={onPress}>\n        <View style={styles.button}>\n          <Text>Highlight Here</Text>\n        </View>\n      </TouchableHighlight>\n      <TouchableOpacity style={styles.button} onPress={onPress}>\n        <Text>Opacity Here</Text>\n      </TouchableOpacity>\n      <TouchableWithoutFeedback onPress={onPress}>\n        <View style={styles.button}>\n          <Text>WithoutFeedback Here</Text>\n        </View>\n      </TouchableWithoutFeedback>\n      <View style={styles.countContainer}>\n        <Text style={styles.countText}>{count || null}</Text>\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 10,\n    rowGap: 12,\n  },\n  button: {\n    alignItems: 'center',\n    backgroundColor: '#DDDDDD',\n    padding: 10,\n  },\n  countContainer: {\n    alignItems: 'center',\n    padding: 10,\n  },\n  countText: {\n    color: '#FF00FF',\n  },\n});\n\nexport default TouchablesExample;\n")),(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-touchable"},(0,o.kt)("img",{src:u,width:"100%",alt:"touchables"})),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Clicking on the ",(0,o.kt)("a",{href:"https://snack.expo.dev/@dooboolab/cpk-touchable"},"photo")," allows you to run the example code.")),(0,o.kt)("p",null,"This code demonstrates an application using React Native to display various types of touch-responsive buttons on the screen. Specifically, it utilizes three major touch response components offered by React Native: ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableHighlight"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableOpacity"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"TouchableWithoutFeedback"),"."),(0,o.kt)("p",null,"Breaking down the main sections of the code:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Imports"),"\nImport the necessary components and modules from React Native.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"State Initialization")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const [count, setCount] = useState(0);\n")),(0,o.kt)("p",{parentName:"li"},"Create a state variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," and a function, ",(0,o.kt)("inlineCode",{parentName:"p"},"setCount"),", to modify its value. It's initialized to 0.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"onPress Function")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const onPress = () => setCount(count + 1);\n")),(0,o.kt)("p",{parentName:"li"},"Define a function that gets triggered on button press. This function increments the ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," by 1.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Return Section"),"\nReturn the various touch-responsive components and a section to display the current ",(0,o.kt)("inlineCode",{parentName:"p"},"count")," value. "),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TouchableHighlight"),": Shows a bright highlight effect when pressed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TouchableOpacity"),": Reveals a transparency effect when pressed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"TouchableWithoutFeedback"),": Performs actions when pressed, without any visual effect.")),(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," function is attached to each touch-responsive component so that the counter increments each time a button is pressed.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Styles"),"\nDefine the styles for the application. Key styles include:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"container"),": Occupies the full screen and centers the inner items."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"button"),": Style applied to each touch-responsive component. It has a background color and padding set."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"countContainer"),": Styles the section displaying the count."),(0,o.kt)("li",{parentName:"ul"},"`")))),(0,o.kt)("p",null,"countText`: Styles the count text, setting the text color to purple."),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Export"),"\nSet ",(0,o.kt)("inlineCode",{parentName:"li"},"TouchablesExample")," as the default export, making it importable in other files.")),(0,o.kt)("p",null,"Now that we've covered the main components of React Native, you're better equipped to start building diverse and responsive mobile applications. The power of React Native lies in the rich ecosystem and community that supports it. Continue exploring, and don't forget to check out the official React Native documentation for more in-depth knowledge and best practices!"),(0,o.kt)("p",null,"Happy coding! \ud83d\ude80"),(0,o.kt)(r.Z,{unit:"DAN-weLLBNA8C31gpo1t",className:"adfit-bottom-mobile",mdxType:"AdFitMobileBanner"}))}C.isMDXComponent=!0}}]);